# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2016-03-15 18:44
from __future__ import unicode_literals

import django.contrib.postgres.fields.hstore
from django.db import migrations, models
import django.db.models.deletion
import glims.lims
import jsonfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('extensible', '0001_initial'),
        ('django_cloudstore', '0002_cloudstore_url'),
    ]

    operations = [
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now=True)),
                ('subject', models.CharField(max_length=250)),
                ('body', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='EmailRecipient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=75)),
                ('sent', models.DateTimeField(blank=True, null=True)),
                ('email', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipients', to='glims.Email')),
            ],
        ),
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('subject', models.CharField(max_length=250)),
                ('body', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Lab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('slug', models.SlugField(max_length=20, null=True, unique=True)),
                ('cloudstore', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='django_cloudstore.CloudStore')),
            ],
        ),
        migrations.CreateModel(
            name='ModelTypePlugins',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.IntegerField(default=0)),
                ('layout', models.CharField(choices=[(b'inline', b'Inline'), (b'tabbed', b'Tab')], max_length=10)),
                ('header', models.CharField(blank=True, max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Plugin',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('page', models.CharField(max_length=50)),
                ('template', models.CharField(max_length=250)),
                ('model_types', models.ManyToManyField(blank=True, null=True, related_name='plugins', through='glims.ModelTypePlugins', to='extensible.ModelType')),
            ],
        ),
        migrations.CreateModel(
            name='Pool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, null=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('created', models.DateField(auto_now=True)),
                ('sample_data', jsonfield.fields.JSONField(blank=True, default={}, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, null=True)),
                ('project_id', models.CharField(blank=True, default=glims.lims.generate_project_id, max_length=4, null=True, unique=True)),
                ('created', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('history', jsonfield.fields.JSONField(blank=True, default={}, null=True)),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='glims.Lab')),
                ('sample_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='extensible.ModelType')),
            ],
            options={
                'permissions': (('view', 'View Project'), ('admin', 'Administer Project'), ('pi', 'Can PI a Project')),
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', django.contrib.postgres.fields.hstore.HStoreField(blank=True, default=dict, null=True)),
                ('sample_id', models.CharField(max_length=60, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now=True)),
                ('received', models.DateField(blank=True, null=True)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='glims.Project')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='extensible.ModelType')),
            ],
            options={
                'permissions': (('view', 'View Sample'), ('admin', 'Administer Sample')),
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('description', models.TextField(blank=True, null=True)),
                ('order', models.PositiveSmallIntegerField()),
                ('model_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_options', to='extensible.ModelType')),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='glims.Status'),
        ),
        migrations.AddField(
            model_name='project',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='extensible.ModelType'),
        ),
        migrations.AddField(
            model_name='pool',
            name='samples',
            field=models.ManyToManyField(blank=True, null=True, related_name='pools', to='glims.Sample'),
        ),
        migrations.AddField(
            model_name='pool',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='extensible.ModelType'),
        ),
        migrations.AddField(
            model_name='modeltypeplugins',
            name='plugin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='glims.Plugin'),
        ),
        migrations.AddField(
            model_name='modeltypeplugins',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='extensible.ModelType'),
        ),
    ]
